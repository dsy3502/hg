// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: contrib/envoy/extensions/filters/http/http_dubbo_transcoder/v3/http_dubbo_transcoder.proto

package envoy_extensions_filters_http_http_dubbo_transcoder_v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on HttpDubboTranscoder with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpDubboTranscoder) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequestValidationOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpDubboTranscoderValidationError{
				field:  "RequestValidationOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := HttpDubboTranscoder_UrlUnescapeSpec_name[int32(m.GetUrlUnescapeSpec())]; !ok {
		return HttpDubboTranscoderValidationError{
			field:  "UrlUnescapeSpec",
			reason: "value must be one of the defined enum values",
		}
	}

	for idx, item := range m.GetServicesMapping() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpDubboTranscoderValidationError{
					field:  fmt.Sprintf("ServicesMapping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HttpDubboTranscoderValidationError is the validation error returned by
// HttpDubboTranscoder.Validate if the designated constraints aren't met.
type HttpDubboTranscoderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpDubboTranscoderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpDubboTranscoderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpDubboTranscoderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpDubboTranscoderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpDubboTranscoderValidationError) ErrorName() string {
	return "HttpDubboTranscoderValidationError"
}

// Error satisfies the builtin error interface
func (e HttpDubboTranscoderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpDubboTranscoder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpDubboTranscoderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpDubboTranscoderValidationError{}

// Validate checks the field values on
// HttpDubboTranscoder_RequestValidateOptions with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HttpDubboTranscoder_RequestValidateOptions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RejectUnknownQueryParameters

	// no validation rules for RejectUnknownMethod

	return nil
}

// HttpDubboTranscoder_RequestValidateOptionsValidationError is the validation
// error returned by HttpDubboTranscoder_RequestValidateOptions.Validate if
// the designated constraints aren't met.
type HttpDubboTranscoder_RequestValidateOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpDubboTranscoder_RequestValidateOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpDubboTranscoder_RequestValidateOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpDubboTranscoder_RequestValidateOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpDubboTranscoder_RequestValidateOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpDubboTranscoder_RequestValidateOptionsValidationError) ErrorName() string {
	return "HttpDubboTranscoder_RequestValidateOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e HttpDubboTranscoder_RequestValidateOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpDubboTranscoder_RequestValidateOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpDubboTranscoder_RequestValidateOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpDubboTranscoder_RequestValidateOptionsValidationError{}

// Validate checks the field values on HttpDubboTranscoder_DubboMethodMapping
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *HttpDubboTranscoder_DubboMethodMapping) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return HttpDubboTranscoder_DubboMethodMappingValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if v, ok := interface{}(m.GetPathMatcher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpDubboTranscoder_DubboMethodMappingValidationError{
				field:  "PathMatcher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParameterMapping() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpDubboTranscoder_DubboMethodMappingValidationError{
					field:  fmt.Sprintf("ParameterMapping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPassthroughSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpDubboTranscoder_DubboMethodMappingValidationError{
				field:  "PassthroughSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HttpDubboTranscoder_DubboMethodMappingValidationError is the validation
// error returned by HttpDubboTranscoder_DubboMethodMapping.Validate if the
// designated constraints aren't met.
type HttpDubboTranscoder_DubboMethodMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpDubboTranscoder_DubboMethodMappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpDubboTranscoder_DubboMethodMappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpDubboTranscoder_DubboMethodMappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpDubboTranscoder_DubboMethodMappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpDubboTranscoder_DubboMethodMappingValidationError) ErrorName() string {
	return "HttpDubboTranscoder_DubboMethodMappingValidationError"
}

// Error satisfies the builtin error interface
func (e HttpDubboTranscoder_DubboMethodMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpDubboTranscoder_DubboMethodMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpDubboTranscoder_DubboMethodMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpDubboTranscoder_DubboMethodMappingValidationError{}

// Validate checks the field values on HttpDubboTranscoder_DubboServiceMapping
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *HttpDubboTranscoder_DubboServiceMapping) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return HttpDubboTranscoder_DubboServiceMappingValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		return HttpDubboTranscoder_DubboServiceMappingValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetMethodMapping() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpDubboTranscoder_DubboServiceMappingValidationError{
					field:  fmt.Sprintf("MethodMapping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HttpDubboTranscoder_DubboServiceMappingValidationError is the validation
// error returned by HttpDubboTranscoder_DubboServiceMapping.Validate if the
// designated constraints aren't met.
type HttpDubboTranscoder_DubboServiceMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpDubboTranscoder_DubboServiceMappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpDubboTranscoder_DubboServiceMappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpDubboTranscoder_DubboServiceMappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpDubboTranscoder_DubboServiceMappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpDubboTranscoder_DubboServiceMappingValidationError) ErrorName() string {
	return "HttpDubboTranscoder_DubboServiceMappingValidationError"
}

// Error satisfies the builtin error interface
func (e HttpDubboTranscoder_DubboServiceMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpDubboTranscoder_DubboServiceMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpDubboTranscoder_DubboServiceMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpDubboTranscoder_DubboServiceMappingValidationError{}

// Validate checks the field values on
// HttpDubboTranscoder_DubboMethodMapping_ParameterMapping with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ExtractKeySpec

	// no validation rules for ExtractKey

	// no validation rules for MappingType

	return nil
}

// HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError is
// the validation error returned by
// HttpDubboTranscoder_DubboMethodMapping_ParameterMapping.Validate if the
// designated constraints aren't met.
type HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError) ErrorName() string {
	return "HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError"
}

// Error satisfies the builtin error interface
func (e HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpDubboTranscoder_DubboMethodMapping_ParameterMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpDubboTranscoder_DubboMethodMapping_ParameterMappingValidationError{}

// Validate checks the field values on
// HttpDubboTranscoder_DubboMethodMapping_PathMatcher with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HttpDubboTranscoder_DubboMethodMapping_PathMatcher) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MatchPattern

	// no validation rules for MatchHttpMethodSpec

	return nil
}

// HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError is the
// validation error returned by
// HttpDubboTranscoder_DubboMethodMapping_PathMatcher.Validate if the
// designated constraints aren't met.
type HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError) ErrorName() string {
	return "HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError"
}

// Error satisfies the builtin error interface
func (e HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpDubboTranscoder_DubboMethodMapping_PathMatcher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpDubboTranscoder_DubboMethodMapping_PathMatcherValidationError{}

// Validate checks the field values on
// HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) Validate() error {
	if m == nil {
		return nil
	}

	switch m.HeadersSetting.(type) {

	case *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughAllHeaders:
		// no validation rules for PassthroughAllHeaders

	case *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders_:

		if v, ok := interface{}(m.GetPassthroughHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError{
					field:  "PassthroughHeaders",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError is
// the validation error returned by
// HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting.Validate if the
// designated constraints aren't met.
type HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError) ErrorName() string {
	return "HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError"
}

// Error satisfies the builtin error interface
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpDubboTranscoder_DubboMethodMapping_PassthroughSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpDubboTranscoder_DubboMethodMapping_PassthroughSettingValidationError{}

// Validate checks the field values on
// HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError
// is the validation error returned by
// HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders.Validate
// if the designated constraints aren't met.
type HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError) ErrorName() string {
	return "HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError"
}

// Error satisfies the builtin error interface
func (e HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeadersValidationError{}
