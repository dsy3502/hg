// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networking/v1alpha3/service_subscription_list.proto

package v1alpha3

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceSubscriptionList_Resolution int32

const (
	ServiceSubscriptionList_CONFIGSERVER ServiceSubscriptionList_Resolution = 0
	ServiceSubscriptionList_VIPSERVER    ServiceSubscriptionList_Resolution = 1
	ServiceSubscriptionList_NACOS        ServiceSubscriptionList_Resolution = 2
)

var ServiceSubscriptionList_Resolution_name = map[int32]string{
	0: "CONFIGSERVER",
	1: "VIPSERVER",
	2: "NACOS",
}

var ServiceSubscriptionList_Resolution_value = map[string]int32{
	"CONFIGSERVER": 0,
	"VIPSERVER":    1,
	"NACOS":        2,
}

func (x ServiceSubscriptionList_Resolution) String() string {
	return proto.EnumName(ServiceSubscriptionList_Resolution_name, int32(x))
}

func (ServiceSubscriptionList_Resolution) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_609e56f44a3ac490, []int{0, 0}
}

// <!-- crd generation tags
// +cue-gen:ServiceSubscriptionList:groupName:networking.istio.io
// +cue-gen:ServiceSubscriptionList:version:v1alpha3
// +cue-gen:ServiceSubscriptionList:storageVersion
// +cue-gen:ServiceSubscriptionList:annotations:helm.sh/resource-policy=keep
// +cue-gen:ServiceSubscriptionList:labels:app=istio-pilot,chart=istio,heritage=Tiller,release=istio
// +cue-gen:ServiceSubscriptionList:subresource:status
// +cue-gen:ServiceSubscriptionList:scope:Namespaced
// +cue-gen:ServiceSubscriptionList:resource:categories=istio-io,networking-istio-io
// +cue-gen:ServiceSubscriptionList:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=networking.istio.io/v1alpha3
// +genclient
// +k8s:deepcopy-gen=true
// -->
type ServiceSubscriptionList struct {
	Resolution           ServiceSubscriptionList_Resolution `protobuf:"varint,1,opt,name=resolution,proto3,enum=istio.networking.v1alpha3.ServiceSubscriptionList_Resolution" json:"resolution,omitempty"`
	Subscriptions        []*ServiceSubscription             `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ServiceSubscriptionList) Reset()         { *m = ServiceSubscriptionList{} }
func (m *ServiceSubscriptionList) String() string { return proto.CompactTextString(m) }
func (*ServiceSubscriptionList) ProtoMessage()    {}
func (*ServiceSubscriptionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_609e56f44a3ac490, []int{0}
}
func (m *ServiceSubscriptionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceSubscriptionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceSubscriptionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceSubscriptionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSubscriptionList.Merge(m, src)
}
func (m *ServiceSubscriptionList) XXX_Size() int {
	return m.Size()
}
func (m *ServiceSubscriptionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSubscriptionList.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSubscriptionList proto.InternalMessageInfo

func (m *ServiceSubscriptionList) GetResolution() ServiceSubscriptionList_Resolution {
	if m != nil {
		return m.Resolution
	}
	return ServiceSubscriptionList_CONFIGSERVER
}

func (m *ServiceSubscriptionList) GetSubscriptions() []*ServiceSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type ServiceSubscription struct {
	Hostname             string            `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Version              string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Group                string            `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Port                 *Port             `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	Units                []string          `protobuf:"bytes,5,rep,name=units,proto3" json:"units,omitempty"`
	Labels               map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServiceSubscription) Reset()         { *m = ServiceSubscription{} }
func (m *ServiceSubscription) String() string { return proto.CompactTextString(m) }
func (*ServiceSubscription) ProtoMessage()    {}
func (*ServiceSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_609e56f44a3ac490, []int{1}
}
func (m *ServiceSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSubscription.Merge(m, src)
}
func (m *ServiceSubscription) XXX_Size() int {
	return m.Size()
}
func (m *ServiceSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSubscription proto.InternalMessageInfo

func (m *ServiceSubscription) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ServiceSubscription) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServiceSubscription) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ServiceSubscription) GetPort() *Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *ServiceSubscription) GetUnits() []string {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *ServiceSubscription) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterEnum("istio.networking.v1alpha3.ServiceSubscriptionList_Resolution", ServiceSubscriptionList_Resolution_name, ServiceSubscriptionList_Resolution_value)
	proto.RegisterType((*ServiceSubscriptionList)(nil), "istio.networking.v1alpha3.ServiceSubscriptionList")
	proto.RegisterType((*ServiceSubscription)(nil), "istio.networking.v1alpha3.ServiceSubscription")
	proto.RegisterMapType((map[string]string)(nil), "istio.networking.v1alpha3.ServiceSubscription.LabelsEntry")
}

func init() {
	proto.RegisterFile("networking/v1alpha3/service_subscription_list.proto", fileDescriptor_609e56f44a3ac490)
}

var fileDescriptor_609e56f44a3ac490 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x8a, 0xd3, 0x40,
	0x1c, 0xc6, 0x9d, 0x64, 0x5b, 0xed, 0xbf, 0xae, 0x84, 0x51, 0x30, 0xf6, 0x50, 0x63, 0x4f, 0x3d,
	0x4d, 0xb0, 0xb9, 0xac, 0x0b, 0x1e, 0x74, 0xa9, 0xb2, 0xb0, 0xec, 0x2e, 0x13, 0xd9, 0x83, 0x20,
	0x65, 0x5a, 0x86, 0x76, 0x68, 0xcc, 0x84, 0x99, 0x49, 0x4a, 0xdf, 0xc0, 0x77, 0xf2, 0x05, 0x3c,
	0xfa, 0x08, 0xd2, 0x27, 0x91, 0x4c, 0xd2, 0x36, 0x42, 0x2b, 0xf4, 0x96, 0xef, 0x9f, 0xf9, 0xff,
	0xbe, 0xf9, 0x3e, 0x06, 0xa2, 0x94, 0x9b, 0x95, 0x54, 0x4b, 0x91, 0xce, 0xc3, 0xe2, 0x2d, 0x4b,
	0xb2, 0x05, 0x8b, 0x42, 0xcd, 0x55, 0x21, 0x66, 0x7c, 0xa2, 0xf3, 0xa9, 0x9e, 0x29, 0x91, 0x19,
	0x21, 0xd3, 0x49, 0x22, 0xb4, 0x21, 0x99, 0x92, 0x46, 0xe2, 0x57, 0x42, 0x1b, 0x21, 0xc9, 0x7e,
	0x95, 0x6c, 0x57, 0x7b, 0x6f, 0x0e, 0xf1, 0xe6, 0xcc, 0xf0, 0x15, 0x5b, 0x57, 0xdb, 0x83, 0x1f,
	0x0e, 0xbc, 0x8c, 0x2b, 0x87, 0xb8, 0x61, 0x70, 0x23, 0xb4, 0xc1, 0xdf, 0x00, 0x14, 0xd7, 0x32,
	0xc9, 0xcb, 0x89, 0x8f, 0x02, 0x34, 0x7c, 0x36, 0x7a, 0x4f, 0x8e, 0xda, 0x91, 0x23, 0x1c, 0x42,
	0x77, 0x10, 0xda, 0x00, 0xe2, 0x2f, 0x70, 0xde, 0xcc, 0xa4, 0x7d, 0x27, 0x70, 0x87, 0xdd, 0x11,
	0x39, 0xcd, 0x81, 0xfe, 0x0b, 0x19, 0x5c, 0x00, 0xec, 0xfd, 0xb0, 0x07, 0x4f, 0xaf, 0xee, 0x6e,
	0x3f, 0x5d, 0x7f, 0x8e, 0xc7, 0xf4, 0x61, 0x4c, 0xbd, 0x47, 0xf8, 0x1c, 0x3a, 0x0f, 0xd7, 0xf7,
	0xb5, 0x44, 0xb8, 0x03, 0xad, 0xdb, 0x0f, 0x57, 0x77, 0xb1, 0xe7, 0x0c, 0x7e, 0x3a, 0xf0, 0xfc,
	0x80, 0x01, 0xee, 0xc1, 0x93, 0x85, 0xd4, 0x26, 0x65, 0xdf, 0xb9, 0x2d, 0xa1, 0x43, 0x77, 0x1a,
	0xfb, 0xf0, 0xb8, 0xe0, 0x4a, 0x97, 0xfd, 0x38, 0xf6, 0xd7, 0x56, 0xe2, 0x17, 0xd0, 0x9a, 0x2b,
	0x99, 0x67, 0xbe, 0x6b, 0xe7, 0x95, 0xc0, 0x11, 0x9c, 0x65, 0x52, 0x19, 0xff, 0x2c, 0x40, 0xc3,
	0xee, 0xe8, 0xf5, 0x7f, 0xa2, 0xde, 0x4b, 0x65, 0xa8, 0x3d, 0x5c, 0xa2, 0xf2, 0x54, 0x18, 0xed,
	0xb7, 0x02, 0xb7, 0x44, 0x59, 0x81, 0x29, 0xb4, 0x13, 0x36, 0xe5, 0x89, 0xf6, 0xdb, 0xb6, 0xb7,
	0xcb, 0xd3, 0x7a, 0x23, 0x37, 0x76, 0x79, 0x9c, 0x1a, 0xb5, 0xa6, 0x35, 0xa9, 0xf7, 0x0e, 0xba,
	0x8d, 0x31, 0xf6, 0xc0, 0x5d, 0xf2, 0x75, 0x1d, 0xba, 0xfc, 0x2c, 0xaf, 0x52, 0xb0, 0x24, 0xe7,
	0x75, 0xda, 0x4a, 0x5c, 0x3a, 0x17, 0xe8, 0x23, 0xf9, 0xb5, 0xe9, 0xa3, 0xdf, 0x9b, 0x3e, 0xfa,
	0xb3, 0xe9, 0xa3, 0xaf, 0x41, 0x75, 0x17, 0x21, 0x43, 0x96, 0x89, 0xf0, 0xc0, 0x33, 0x9c, 0xb6,
	0xed, 0xfb, 0x8b, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x7f, 0x26, 0x38, 0xf4, 0x02, 0x00,
	0x00,
}

func (m *ServiceSubscriptionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSubscriptionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSubscriptionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Resolution != 0 {
		i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(m.Resolution))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Units) > 0 {
		for iNdEx := len(m.Units) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Units[iNdEx])
			copy(dAtA[i:], m.Units[iNdEx])
			i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(len(m.Units[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Port != nil {
		{
			size, err := m.Port.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintServiceSubscriptionList(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceSubscriptionList(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceSubscriptionList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceSubscriptionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resolution != 0 {
		n += 1 + sovServiceSubscriptionList(uint64(m.Resolution))
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovServiceSubscriptionList(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovServiceSubscriptionList(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovServiceSubscriptionList(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovServiceSubscriptionList(uint64(l))
	}
	if m.Port != nil {
		l = m.Port.Size()
		n += 1 + l + sovServiceSubscriptionList(uint64(l))
	}
	if len(m.Units) > 0 {
		for _, s := range m.Units {
			l = len(s)
			n += 1 + l + sovServiceSubscriptionList(uint64(l))
		}
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovServiceSubscriptionList(uint64(len(k))) + 1 + len(v) + sovServiceSubscriptionList(uint64(len(v)))
			n += mapEntrySize + 1 + sovServiceSubscriptionList(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServiceSubscriptionList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceSubscriptionList(x uint64) (n int) {
	return sovServiceSubscriptionList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceSubscriptionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceSubscriptionList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSubscriptionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSubscriptionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			m.Resolution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resolution |= ServiceSubscriptionList_Resolution(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &ServiceSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceSubscriptionList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceSubscriptionList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Port == nil {
				m.Port = &Port{}
			}
			if err := m.Port.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceSubscriptionList
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceSubscriptionList
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceSubscriptionList
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceSubscriptionList
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceSubscriptionList
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthServiceSubscriptionList
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthServiceSubscriptionList
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceSubscriptionList(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthServiceSubscriptionList
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceSubscriptionList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceSubscriptionList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceSubscriptionList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceSubscriptionList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceSubscriptionList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceSubscriptionList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceSubscriptionList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceSubscriptionList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceSubscriptionList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceSubscriptionList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceSubscriptionList = fmt.Errorf("proto: unexpected end of group")
)
